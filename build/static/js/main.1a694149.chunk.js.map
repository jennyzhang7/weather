{"version":3,"sources":["questionmark.png","App.js","reportWebVitals.js","index.js"],"names":["App","useState","results","setResults","longitude","setLongitude","latitude","setLatitude","isFahrenheit","setIsFahrenheit","useEffect","navigator","geolocation","getCurrentPosition","showPosition","console","log","x","innerHTML","document","getElementById","position","String","coords","kelvinTemp","fetchWeatherData","a","length","fetch","process","REACT_APP_API_KEY","response","json","data","dataPoint","temp","main","city","name","icon","weather","className","id","src","image","alt","toFixed","convertToFahrenheit","convertToCelcius","type","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"yPAAe,G,MAAA,IAA0B,0CCmH1BA,MA/Gf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGmBJ,mBAAS,IAH5B,mBAGNK,EAHM,KAGIC,EAHJ,OAK2BN,oBAAS,GALpC,mBAKNO,EALM,KAKQC,EALR,KAObC,qBAAU,WAMJC,UAAUC,aACZD,UAAUC,YAAYC,mBAAmBC,GACzCC,QAAQC,IAAI,YAAcZ,GAC1BW,QAAQC,IAAI,WAAaV,IAGzBW,EAAEC,UAAY,kDAVf,IAEH,IAAID,EAAIE,SAASC,eAAe,QAYhC,SAASN,EAAaO,GACpBN,QAAQC,IAAIK,GACZhB,EAAaiB,OAAOD,EAASE,OAAOnB,YACpCG,EAAYe,OAAOD,EAASE,OAAOjB,WAGrC,IAQwBkB,EAoBlBC,EAAgB,uCAAG,gCAAAC,EAAA,yDACvBX,QAAQC,IAAId,EAAQyB,QACH,KAAbrB,GAAiC,KAAdF,EAFA,iCAGEwB,MAAM,uDAAD,OAC6BtB,EAD7B,gBAC6CF,EAD7C,kBACgEyB,mIAAYC,oBAJnF,cAGfC,EAHe,gBAOFA,EAASC,OAPP,OAOfC,EAPe,OAQrBlB,QAAQC,IAAIiB,GACNC,EAAY,CAChBC,KAAMF,EAAKG,KAAKD,KAChBE,KAAMJ,EAAKK,KACXC,KAAMN,EAAKO,QAAQ,GAAGD,MAExBpC,EAAW+B,GACXnB,QAAQC,IAAId,GAfS,4CAAH,qDAkBtB,OACE,sBAAKuC,UAAU,MAAf,UACE,sBAAKC,GAAG,OAAR,UACqB,IAAnBxC,EAAQyB,QACN,qCACE,qBAAKgB,IAAKC,EAAOC,IAAI,UACrB,gGAJN,IASuB,IAAnB3C,EAAQyB,QACR,qCACE,qBACEgB,IAAG,2CAAsCzC,EAAQqC,KAA9C,WACHM,IAAI,SAEN,6BAAK3C,EAAQmC,OACb,gCAxDcb,EAyDItB,EAAQiC,KAxD9B3B,EATsB,SAACgB,GAC3B,OAAiC,GAAvBA,EAAa,QAAe,EAAI,IAAIsB,QAAQ,GAS7CC,CAAoBvB,GANN,SAACA,GACxB,OAAQA,EAAa,QAAQsB,QAAQ,GAO5BE,CAAiBxB,IAoDlB,IA/CJhB,EACK,SAEA,kBAmDP,wBAAQyC,KAAK,SAASC,QAAS,kBAAMzB,KAArC,yBAIA,wBAAQwB,KAAK,SAASC,QAAS,WAlDjCzC,GAAiBD,IAkDf,oCChGS2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3C,SAASC,eAAe,SAM1B+B,M","file":"static/js/main.1a694149.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/questionmark.0b8753e0.png\";","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport image from \"./questionmark.png\";\n\nfunction App() {\n  const [results, setResults] = useState([]);\n  const [longitude, setLongitude] = useState(\"\");\n  const [latitude, setLatitude] = useState(\"\");\n\n  const [isFahrenheit, setIsFahrenheit] = useState(true);\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  var x = document.getElementById(\"demo\");\n  function getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition);\n      console.log(\"Longitude\" + longitude);\n      console.log(\"Latitude\" + latitude);\n\n    } else {\n      x.innerHTML = \"Geolocation is not supported by this browser.\";\n    }\n  }\n\n  function showPosition(position) {\n    console.log(position);\n    setLongitude(String(position.coords.longitude));\n    setLatitude(String(position.coords.latitude));\n  }\n\n  const convertToFahrenheit = (kelvinTemp) => {\n    return (((kelvinTemp - 273.15) * 9) / 5 + 32).toFixed(2);\n  };\n\n  const convertToCelcius = (kelvinTemp) => {\n    return (kelvinTemp - 273.15).toFixed(2);\n  };\n\n  const getTemperature = (kelvinTemp) => {\n    if (isFahrenheit) {\n      return convertToFahrenheit(kelvinTemp);\n    } else {\n      return convertToCelcius(kelvinTemp);\n    }\n  };\n\n  const getMeasurement = () => {\n    if (isFahrenheit) {\n      return \"° F\";\n    } else {\n      return \"° C\";\n    }\n  };\n\n  const toggleMeasurement = () => {\n    setIsFahrenheit(!isFahrenheit);\n  };\n\n  const fetchWeatherData = async () => {\n    console.log(results.length)\n    if (latitude !== \"\" || longitude !== \"\") {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${process.env.REACT_APP_API_KEY}`\n      );\n\n      const data = await response.json();\n      console.log(data);\n      const dataPoint = {\n        temp: data.main.temp,\n        city: data.name,\n        icon: data.weather[0].icon,\n      };\n      setResults(dataPoint);\n      console.log(results);\n    }\n  };\n  return (\n    <div className=\"App\">\n      <div id=\"demo\">\n      {(results.length === 0) && (\n          <>\n            <img src={image} alt=\"dance\"></img>\n            <h2>\n              Click on button below to check out today's weather forecast\n            </h2>\n          </>\n        )}a\n        {(results.length !== 0) && (\n          <>\n            <img\n              src={`http://openweathermap.org/img/wn/${results.icon}@2x.png`}\n              alt=\"Logo\"\n            />\n            <h1>{results.city}</h1>\n            <h2>\n              {getTemperature(results.temp)} {getMeasurement()}\n            </h2>\n          </>\n        )}\n      </div>\n\n      <button type=\"button\" onClick={() => fetchWeatherData()}>\n        Get Weather\n      </button>\n\n      <button type=\"button\" onClick={() => toggleMeasurement()}>\n        Celcius/Fahrenheit\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}